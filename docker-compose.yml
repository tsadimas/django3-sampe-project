version: "3"

services:
  db:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=pass123
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U postgres
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - ./assets/postgres:/docker-entrypoint-initdb.d
      - dj_postgres_data:/var/lib/postgresql/data/
  
  django-migrations:
    build:
      context: .
      dockerfile: nonroot.Dockerfile
    command: sh -c "python manage.py makemigrations && python manage.py migrate --noinput"
    env_file:
     - ./myproject/myproject/.env
    volumes:
      - static_volume:/app/static
    depends_on:
      - db
  
  django:
    build:
      context: .
      dockerfile: nonroot.Dockerfile
    env_file:
     - ./myproject/myproject/.env
    ports:
      - "8000:8000"
    volumes:
      - static_volume:/app/static
    depends_on:
      - db
  nginx:
    image: nginx:latest
    volumes:
      - ./assets/nginx/nginx.http.config:/etc/nginx/nginx.conf
      #- ./assets/nginx/certs:/etc/nginx/certs
      - static_volume:/app/static
    ports:
      # - "443:443"
      - "80:80"
    depends_on:
      - django
  keycloak:
    image: 'quay.io/keycloak/keycloak:21.0'
    volumes:
      - './assets/keycloak/realm-export.json:/opt/jboss/keycloak/imports/realm-export.json'

    environment:
        DB_VENDOR: POSTGRES
        DB_ADDR: db
        DB_DATABASE: keycloak
        DB_SCHEMA: public
        KC_DB_USERNAME: keycloak_user
        # DB_SCHEMA: public
        KC_DB_PASSWORD: pass123
        KEYCLOAK_USER: keycloakuser
        KEYCLOAK_PASSWORD: keycloakpassword
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: admin
        PROXY_ADDRESS_FORWARDING: 'true'
        KEYCLOAK_LOGLEVEL: DEBUG
    entrypoint:
      [
        "/opt/keycloak/bin/kc.sh",
        "start",
        "--optimized",
        "--http-enabled=true",
        "--hostname-strict-https=false",
        "--hostname-strict=false",
        "--proxy=edge"
      ]
    ports:
      - '8080:8080'
    depends_on:
      db:
        condition: service_healthy
    restart: always
    healthcheck:
      test: 'curl --fail http://localhost:9990 || exit 1'
      interval: 30s
      timeout: 30s
      retries: 3

volumes:
  dj_postgres_data:
  static_volume:
